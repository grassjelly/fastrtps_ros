// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Velocities.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _Velocities_H_
#define _Velocities_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Velocities_SOURCE)
#define Velocities_DllAPI __declspec( dllexport )
#else
#define Velocities_DllAPI __declspec( dllimport )
#endif // Velocities_SOURCE
#else
#define Velocities_DllAPI
#endif
#else
#define Velocities_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure Velocities defined by the user in the IDL file.
 * @ingroup VELOCITIES
 */
class Velocities
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Velocities();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Velocities();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Velocities that will be copied.
     */
    eProsima_user_DllExport Velocities(const Velocities &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Velocities that will be copied.
     */
    eProsima_user_DllExport Velocities(Velocities &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Velocities that will be copied.
     */
    eProsima_user_DllExport Velocities& operator=(const Velocities &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Velocities that will be copied.
     */
    eProsima_user_DllExport Velocities& operator=(Velocities &&x);
    
    /*!
     * @brief This function copies the value in member robot_id
     * @param _robot_id New value to be copied in member robot_id
     */
    inline eProsima_user_DllExport void robot_id(const std::string &_robot_id)
    {
        m_robot_id = _robot_id;
    }

    /*!
     * @brief This function moves the value in member robot_id
     * @param _robot_id New value to be moved in member robot_id
     */
    inline eProsima_user_DllExport void robot_id(std::string &&_robot_id)
    {
        m_robot_id = std::move(_robot_id);
    }

    /*!
     * @brief This function returns a constant reference to member robot_id
     * @return Constant reference to member robot_id
     */
    inline eProsima_user_DllExport const std::string& robot_id() const
    {
        return m_robot_id;
    }

    /*!
     * @brief This function returns a reference to member robot_id
     * @return Reference to member robot_id
     */
    inline eProsima_user_DllExport std::string& robot_id()
    {
        return m_robot_id;
    }
    /*!
     * @brief This function sets a value in member linear_velocity_x
     * @param _linear_velocity_x New value for member linear_velocity_x
     */
    inline eProsima_user_DllExport void linear_velocity_x(float _linear_velocity_x)
    {
        m_linear_velocity_x = _linear_velocity_x;
    }

    /*!
     * @brief This function returns the value of member linear_velocity_x
     * @return Value of member linear_velocity_x
     */
    inline eProsima_user_DllExport float linear_velocity_x() const
    {
        return m_linear_velocity_x;
    }

    /*!
     * @brief This function returns a reference to member linear_velocity_x
     * @return Reference to member linear_velocity_x
     */
    inline eProsima_user_DllExport float& linear_velocity_x()
    {
        return m_linear_velocity_x;
    }
    /*!
     * @brief This function sets a value in member linear_velocity_y
     * @param _linear_velocity_y New value for member linear_velocity_y
     */
    inline eProsima_user_DllExport void linear_velocity_y(float _linear_velocity_y)
    {
        m_linear_velocity_y = _linear_velocity_y;
    }

    /*!
     * @brief This function returns the value of member linear_velocity_y
     * @return Value of member linear_velocity_y
     */
    inline eProsima_user_DllExport float linear_velocity_y() const
    {
        return m_linear_velocity_y;
    }

    /*!
     * @brief This function returns a reference to member linear_velocity_y
     * @return Reference to member linear_velocity_y
     */
    inline eProsima_user_DllExport float& linear_velocity_y()
    {
        return m_linear_velocity_y;
    }
    /*!
     * @brief This function sets a value in member angular_velocity_z
     * @param _angular_velocity_z New value for member angular_velocity_z
     */
    inline eProsima_user_DllExport void angular_velocity_z(float _angular_velocity_z)
    {
        m_angular_velocity_z = _angular_velocity_z;
    }

    /*!
     * @brief This function returns the value of member angular_velocity_z
     * @return Value of member angular_velocity_z
     */
    inline eProsima_user_DllExport float angular_velocity_z() const
    {
        return m_angular_velocity_z;
    }

    /*!
     * @brief This function returns a reference to member angular_velocity_z
     * @return Reference to member angular_velocity_z
     */
    inline eProsima_user_DllExport float& angular_velocity_z()
    {
        return m_angular_velocity_z;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Velocities& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    std::string m_robot_id;
    float m_linear_velocity_x;
    float m_linear_velocity_y;
    float m_angular_velocity_z;
};

#endif // _Velocities_H_