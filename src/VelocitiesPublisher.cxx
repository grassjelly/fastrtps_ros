// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file VelocitiesPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>

#include <fastrtps/Domain.h>

#include <fastrtps/utils/eClock.h>

#include "VelocitiesPublisher.h"

#include "ros/ros.h"
#include "nav_msgs/Odometry.h"


VelocitiesPublisher::VelocitiesPublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

VelocitiesPublisher::~VelocitiesPublisher() {	Domain::removeParticipant(mp_participant);}

void velocityCallback(const nav_msgs::Odometry::ConstPtr& msg, Publisher *mp_publisher, Velocities st)
{
	//print received odom values
	ROS_INFO("Linear Velocity X: [%f]", msg->twist.twist.linear.x);
	ROS_INFO("Linear Velocity Y: [%f]", msg->twist.twist.linear.y);
	ROS_INFO("Angular Velocity Z: [%f]", msg->twist.twist.angular.z);

	//pass odom values to dds Velocities struct
	st.linear_velocity_x(msg->twist.twist.linear.x);
	st.linear_velocity_y(msg->twist.twist.linear.y);
	st.angular_velocity_z(msg->twist.twist.angular.z);

	//publish to DDS middleware
	mp_publisher->write(&st); 
}

bool VelocitiesPublisher::init()
{
	// Create RTPSParticipant
	
	ParticipantAttributes PParam;
	PParam.rtps.builtin.domainId = 0;
	PParam.rtps.builtin.leaseDuration = c_TimeInfinite;
	PParam.rtps.setName("Participant_publisher");  //You can put here the name you want
	mp_participant = Domain::createParticipant(PParam);
	if(mp_participant == nullptr)
		return false;
	
	//Register the type
	
	Domain::registerType(mp_participant,(TopicDataType*) &myType);
	
	// Create Publisher
	
	PublisherAttributes Wparam;
	Wparam.topic.topicKind = NO_KEY;
	Wparam.topic.topicDataType = myType.getName();  //This type MUST be registered
	Wparam.topic.topicName = "VelocitiesPubSubTopic";
	mp_publisher = Domain::createPublisher(mp_participant,Wparam,(PublisherListener*)&m_listener);
	if(mp_publisher == nullptr)
		return false;
	cout << "Publisher created, waiting for Subscribers." << endl;
	return true;
}

void VelocitiesPublisher::PubListener::onPublicationMatched(Publisher* pub,MatchingInfo& info)
{
	if (info.status == MATCHED_MATCHING)
	{
		n_matched++;
		cout << "Publisher matched" << endl;
	}
	else
	{
		n_matched--;
		cout << "Publisher unmatched" << endl;
	}
}

void VelocitiesPublisher::run()
{
	while(m_listener.n_matched == 0)
	{
		eClock::my_sleep(250); // Sleep 250 ms
	}
	
	// Publication code
	
	Velocities st;
	
	/* Initialize your structure here */
	// int msgsent = 0;
	// char ch = 'y';
	// do
	// {
	// 	if(ch == 'y')
	// 	{
	// 		mp_publisher->write(&st);  ++msgsent;
	// 		cout << "Sending sample, count=" << msgsent << ", send another sample?(y-yes,n-stop): ";
	// 	}
	// 	else if(ch == 'n')
	// 	{
	// 		cout << "Stopping execution " << endl;
	// 		break;
	// 	}
	// 	else
	// 	{
	// 		cout << "Command " << ch << " not recognized, please enter \"y/n\":";
	// 	}
	// }while(std::cin >> ch);

	ros::NodeHandle nh;
    ros::Subscriber sub = nh.subscribe<nav_msgs::Odometry>("odom", 1000, boost::bind(velocityCallback, _1, mp_publisher, st));
	ros::spin();

}
